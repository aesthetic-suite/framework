import React from 'react';

declare module 'aesthetic' {
  declare export type AestheticOptions = {
    defaultTheme: string,
    extendable: boolean,
    pure: boolean,
    stylesPropName: string,
    themePropName: string,
  };

  declare export type AtRule =
    '@charset' |
    '@font-face' |
    '@global' |
    '@import' |
    '@keyframes' |
    '@media' |
    '@namespace' |
    '@page' |
    '@supports' |
    '@viewport' |
    '@fallbacks';

  declare export type ClassName = string;

  declare export type EventCallback =
    // @charset
    ((styleSheet: StyleSheet, style: string) => void) |
    // @import
    ((styleSheet: StyleSheet, style: string) => void) |
    // @namespace
    ((styleSheet: StyleSheet, style: string) => void) |
    // @page, @viewport
    ((styleSheet: StyleSheet, style: StyleBlock) => void) |
    // @font-face
    ((styleSheet: StyleSheet, style: StyleBlock[], fontFamily: string) => void) |
    // @keyframes
    ((styleSheet: StyleSheet, style: StyleBlock, animationName: string) => void) |
    // @global
    ((styleSheet: StyleSheet, declaration: StyleDeclaration, selector: string) => void) |
    // @fallbacks
    ((declaration: StyleDeclaration, style: Style[], property: string) => void) |
    // @media, @supports
    ((declaration: StyleDeclaration, style: StyleBlock, condition: string) => void) |
    // property
    ((declaration: StyleDeclaration, style: Style, property: string) => void);

  declare export type HOCComponent = React$ComponentType<*>;

  declare export type HOCOptions = {
    extendable?: boolean,
    extendFrom?: string,
    pure?: boolean,
    styleName?: string,
    stylesPropName?: string,
    themePropName?: string,
  };

  declare export type HOCWrappedComponent = React$ComponentType<*>;

  declare export type HOCWrapper = (component: HOCWrappedComponent) => HOCComponent;

  declare export type Style = string | number | StyleBlock | Style[];

  declare export type StyleBlock = { [property: string]: Style };

  declare export type StyleDeclaration = {
    '@fallbacks'?: StyleBlock,
    '@media'?: StyleBlock,
    '@supports'?: StyleBlock,
    [property: string]: Style,
  };

  declare export type StyleSheet = {
    '@charset'?: string,
    '@font-face'?: StyleBlock | StyleBlock[],
    '@global'?: { [selector: string]: StyleDeclaration },
    '@import'?: string,
    '@keyframes'?: StyleBlock,
    '@namespace'?: string,
    '@page'?: StyleBlock,
    '@viewport'?: StyleBlock,
    // At-rule values
    // CSS class names
    // Style objects
    [selector: string]: string | ClassName | StyleBlock | StyleDeclaration,
  };

  declare export type StyleSheetCallback = (theme: ThemeSheet, props: Object) => StyleSheet;

  declare export type ThemeSheet = StyleBlock;

  declare export class Adapter {
    options: Object;
    unifiedSyntax: boolean;

    constructor(options?: Object): this;
    create(styleSheet: StyleSheet, styleName: string): StyleSheet;
    transform(...styles: StyleDeclaration[]): ClassName;
  }

  declare export class ClassNameAdapter extends Adapter {}

  declare export class ThemeProvider extends React.Component<{
    children: React$Node,
    name: string,
  }> {}

  declare export default class Aesthetic {
    adapter: Adapter;
    options: AestheticOptions;
    parents: { [childStyleName: string]: string };
    styles: { [styleName: string]: StyleSheet | StyleSheetCallback };
    themes: { [themeName: string]: ThemeSheet };

    constructor(adapter: Adapter, options?: Object): this;
    createStyleSheet(styleName: string, themeName?: string, props?: Object): StyleSheet;
    extendTheme(
      parentThemeName: string,
      themeName: string,
      theme?: ThemeSheet,
      globals?: StyleSheet,
    ): this;
    getStyles(styleName: string, themeName?: string, props?: Object): StyleSheet;
    getTheme(themeName?: string): ThemeSheet;
    registerTheme(
      themeName: string,
      theme?: ThemeSheet,
      globals?: StyleSheet,
    ): this;
    setAdapter(adapter: Adapter): this;
    setStyles(
      styleName: string,
      styleSheet: StyleSheet | StyleSheetCallback,
      extendFrom?: string,
    ): this;
    transformStyles(styles: StyleDeclaration[]): ClassName;
    withStyles(styleSheet: StyleSheet | StyleSheetCallback, options?: HOCOptions): HOCWrapper;
  }

  declare export function style(
    aesthetic: Aesthetic,
    styles: StyleSheet | StyleSheetCallback,
    options?: HOCOptions,
  ): HOCWrapper;

  declare export function createStyler(aesthetic: Aesthetic): {
    style: (styleSheet: StyleSheet | StyleSheetCallback, options?: HOCOptions) => HOCWrapper,
    transform: (...styles: StyleDeclaration[]) => ClassName,
  };
}

declare module 'aesthetic/unified' {
  import type {
    AtRule,
    EventCallback,
    StyleSheet,
    Style,
    StyleBlock,
    StyleDeclaration,
  } from 'aesthetic';

  declare export var GLOBAL_RULES: AtRule[];
  declare export var LOCAL_RULES: AtRule[];

  declare export default class UnifiedSyntax {
    events: { [eventName: string]: EventCallback };
    fontFaces: { [fontFamily: string]: StyleBlock[] };
    fontFacesCache: { [fontFamily: string]: string };
    keyframes: { [animationName: string]: StyleBlock };
    keyframesCache: { [animationName: string]: string };

    checkBlock(value: *): Object;
    convert(styleSheet: StyleSheet): StyleSheet;
    convertDeclaration(selector: string, declaration: StyleDeclaration): StyleDeclaration;
    createUnsupportedHandler(rule: AtRule): () => void;
    emit(eventName: string, args: *[]): this;
    handleCharset(styleSheet: StyleSheet, style: string): void;
    handleDocument(styleSheet: StyleSheet, style: StyleBlock, url: string): void;
    handleFallbacks(declaration: StyleDeclaration, style: Style[], property: string): void;
    handleFontFace(styleSheet: StyleSheet, style: StyleBlock[], fontFamily: string): void;
    handleImport(styleSheet: StyleSheet, style: string): void;
    handleKeyframes(styleSheet: StyleSheet, style: StyleBlock, animationName: string): void;
    handleMedia(declaration: StyleDeclaration, style: StyleBlock, condition: string): void;
    handleNamespace(styleSheet: StyleSheet, style: string): void;
    handlePage(styleSheet: StyleSheet, style: StyleBlock): void;
    handleProperty(declaration: StyleDeclaration, style: Style, property: string): void;
    handleSupports(declaration: StyleDeclaration, style: StyleBlock, condition: string): void;
    handleViewport(styleSheet: StyleSheet, style: StyleBlock): void;
    injectFontFaces(value: Style): Style[];
    injectKeyframes(value: Style): Style[];
    off(eventName: string): this;
    on(eventName: string, callback: EventCallback): this;
  }
}

declare module 'aesthetic/lib/helpers/createStyleElement' {
  declare export default function createStyleElement(id: string): HTMLElement;
}

declare module 'aesthetic/lib/helpers/formatFontFace' {
  import type { StyleBlock } from 'aesthetic';

  declare export default function formatFontFace(properties: StyleBlock): StyleBlock;
}

declare module 'aesthetic/lib/helpers/isObject' {
  declare export default function isObject(value: *): boolean;
}

declare module 'aesthetic/lib/helpers/toArray' {
  declare export default function toArray(value: *): *[];
}
