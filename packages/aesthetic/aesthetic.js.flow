import React from 'react';

declare module 'aesthetic' {
  declare export type AestheticOptions = {
    defaultTheme: string,
    extendable: boolean,
    pure: boolean,
    stylesPropName: string,
    themePropName: string,
  };

  declare export type AtRule =
    '@charset' |
    '@font-face' |
    '@import' |
    '@keyframes' |
    '@media' |
    '@namespace' |
    '@page' |
    '@supports' |
    '@viewport' |
    '@fallbacks';

  declare export type ClassName = string;

  declare export type EventCallback =
    // @charset
    ((statement: Statement, style: string) => void) |
    // @import
    ((statement: Statement, style: string) => void) |
    // @namespace
    ((statement: Statement, style: string) => void) |
    // @page, @viewport
    ((statement: Statement, style: StyleBlock) => void) |
    // @font-face
    ((statement: Statement, style: StyleBlock[], fontFamily: string) => void) |
    // @keyframes
    ((statement: Statement, style: StyleBlock, animationName: string) => void) |
    // @fallbacks
    ((declaration: StyleDeclaration, style: Style[], property: string) => void) |
    // @media, @supports
    ((declaration: StyleDeclaration, style: StyleBlock, condition: string) => void) |
    // property
    ((declaration: StyleDeclaration, style: Style, property: string) => void);

  declare export type HOCComponent = React$ComponentType<*>;

  declare export type HOCOptions = {
    extendable?: boolean,
    extendFrom?: string,
    pure?: boolean,
    styleName?: string,
    stylesPropName?: string,
    themePropName?: string,
  };

  declare export type HOCWrappedComponent = React$ComponentType<*>;

  declare export type Statement = {
    '@font-face'?: StyleBlock[],
    // At-rule values
    // CSS class names
    // Style objects
    [selector: string]: string | ClassName | Style | StyleDeclaration,
  };

  declare export type StatementUnified = {
    '@charset': string,
    '@font-face': StyleBlock,
    '@import': string,
    '@keyframes': StyleBlock,
    '@namespace': string,
    '@page': StyleBlock,
    '@viewport': StyleBlock,
    // CSS class names
    // Style objects
    [selector: string]: ClassName | StyleDeclarationUnified,
  };

  declare export type Style = string | number | StyleBlock | Style[];

  declare export type StyleBlock = { [property: string]: Style };

  declare export type StatementCallback = (theme: ThemeDeclaration, prevStyles: Statement) => Statement;

  declare export type StyleDeclaration = { [property: string]: Style };

  declare export type StyleDeclarationUnified = {
    '@fallbacks': StyleBlock,
    '@media': StyleBlock,
    '@supports': StyleBlock,
    [property: string]: Style,
  };

  declare export type ThemeDeclaration = StyleBlock;

  declare export type StyleSheet = { [selector: string]: ClassName };

  declare export class Adapter {
    options: Object;
    unifiedSyntax: boolean;

    constructor(options?: Object): this;
    transform(styleName: string, statement: Statement): StyleSheet;
  }

  declare export class ClassNameAdapter extends Adapter {}

  declare export class ThemeProvider extends React.Component<{
    children: React$Node,
    name: string,
  }> {}

  declare export default class Aesthetic {
    adapter: Adapter;
    cache: { [styleName: string]: StyleSheet };
    options: AestheticOptions;
    parents: { [childStyleName: string]: string };
    styles: { [styleName: string]: Statement | StatementCallback };
    themes: { [themeName: string]: ThemeDeclaration };

    constructor(adapter: Adapter, options?: Object): this;
    extendTheme(
      parentThemeName: string,
      themeName: string,
      theme?: ThemeDeclaration,
      globals?: Statement,
    ): this;
    getStyles(styleName: string, themeName?: string): Statement;
    getTheme(themeName?: string): ThemeDeclaration;
    registerTheme(
      themeName: string,
      theme?: ThemeDeclaration,
      globals?: Statement,
    ): this;
    setAdapter(adapter: Adapter): this;
    setStyles(
      styleName: string,
      statement: Statement | StatementCallback,
      extendFrom?: string,
    ): this;
    transformStyles(styleName: string, themeName?: string): StyleSheet;
    validateTransform(styleName: string, selector: string, value: ClassName): ClassName;
  }

  declare export function style(
    aesthetic: Aesthetic,
    styles: Statement | StatementCallback,
    options?: HOCOptions,
  ): (HOCWrappedComponent) => HOCComponent;

  declare export function createStyler(aesthetic: Aesthetic): style;

  declare export function classes(...values: *[]): string;
}

declare module 'aesthetic/unified' {
  import type {
    AtRule,
    EventCallback,
    Statement,
    StatementUnified,
    Style,
    StyleBlock,
    StyleDeclaration,
    StyleDeclarationUnified,
  } from 'aesthetic';

  declare export var GLOBAL_RULES: AtRule[];
  declare export var LOCAL_RULES: AtRule[];

  declare export default class UnifiedSyntax {
    events: { [eventName: string]: EventCallback };
    fontFaces: { [fontFamily: string]: StyleBlock[] };
    fontFacesCache: { [fontFamily: string]: string };
    keyframes: { [animationName: string]: StyleBlock };
    keyframesCache: { [animationName: string]: string };

    convert(statement: StatementUnified): Statement;
    convertDeclaration(selector: string, declaration: StyleDeclarationUnified): StyleDeclaration;
    createUnsupportedHandler(rule: AtRule): () => void;
    emit(eventName: string, args: *[]): this;
    handleCharset(statement: Statement, style: string): void;
    handleDocument(statement: Statement, style: StyleBlock, url: string): void;
    handleFallbacks(declaration: StyleDeclaration, style: Style[], property: string): void;
    handleFontFace(statement: Statement, style: StyleBlock[], fontFamily: string): void;
    handleImport(statement: Statement, style: string): void;
    handleKeyframes(statement: Statement, style: StyleBlock, animationName: string): void;
    handleMedia(declaration: StyleDeclaration, style: StyleBlock, condition: string): void;
    handleNamespace(statement: Statement, style: string): void;
    handlePage(statement: Statement, style: StyleBlock): void;
    handleProperty(declaration: StyleDeclaration, style: Style, property: string): void;
    handleSupports(declaration: StyleDeclaration, style: StyleBlock, condition: string): void;
    handleViewport(statement: Statement, style: StyleBlock): void;
    injectFontFaces(value: Style): Style[];
    injectKeyframes(value: Style): Style[];
    off(eventName: string): this;
    on(eventName: string, callback: EventCallback): this;
  }
}

declare module 'aesthetic/lib/helpers/createStyleElement' {
  declare export default function createStyleElement(id: string): HTMLElement;
}

declare module 'aesthetic/lib/helpers/formatFontFace' {
  import type { StyleBlock } from 'aesthetic';

  declare export default function formatFontFace(properties: StyleBlock): StyleBlock;
}

declare module 'aesthetic/lib/helpers/isObject' {
  declare export default function isObject(value: *): boolean;
}

declare module 'aesthetic/lib/helpers/toArray' {
  declare export default function toArray(value: *): *[];
}
