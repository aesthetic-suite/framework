import React from 'react';

declare module 'aesthetic' {
  declare export type AestheticOptions = {
    defaultTheme: string,
    extendable: boolean,
    pure: boolean,
    stylesPropName: string,
    themePropName: string,
  };

  declare export type AtRuleCache<T> = { [rule: string]: T };

  declare export type ClassName = string;

  declare export type EventCallback = (() => void) |
    ((selector: string, properties: StyleDeclaration) => void) |
    ((selector: string, fallbacks: Fallbacks) => void) |
    ((selector: string, fontFamily: string, fontFaces: FontFace[]) => void) |
    ((selector: string, animationName: string, keyframe: Keyframe) => void) |
    ((selector: string, queryName: string, mediaQuery: MediaQuery) => void);

  declare export type Fallback = string;

  declare export type Fallbacks = { [propName: string]: Fallback | Fallback[] };

  declare export type FontFace = {
    fontDisplay?: string,
    fontFamily: string,
    fontStyle?: string,
    fontWeight?: string | number,
    local?: string[],
    src: string | string[],
    unicodeRange?: string,
  };

  declare export type FontFaces = { [fontFamily: string]: FontFace[] };

  declare export type GlobalDeclaration = {
    '@font-face'?: FontFaces,
    '@keyframes'?: Keyframes,
  };

  declare export type HOCComponent = React$ComponentType<*>;

  declare export type HOCOptions = {
    extendable?: boolean,
    extendFrom?: string,
    pure?: boolean,
    styleName?: string,
    stylesPropName?: string,
    themePropName?: string,
  };

  declare export type HOCWrappedComponent = React$ComponentType<*>;

  declare export type Keyframe = {
    from?: StyleBlock,
    to?: StyleBlock,
    [percentage: string]: StyleBlock,
  };

  declare export type Keyframes = { [animationName: string]: Keyframe };

  declare export type MediaQuery = StyleBlock;

  declare export type MediaQueries = { [query: string]: MediaQuery };

  declare export type SelectorMap<T> = { [selector: string]: T };

  declare export type Style = string | string[] | number | StyleBlock | StyleBlock[];

  declare export type StyleBlock = { [propName: string]: Style };

  declare export type StyleCallback = (
    theme: ThemeDeclaration,
    prevStyles: StyleDeclarations,
  ) => StyleDeclarations;

  declare export type StyleDeclaration = {
    [propName: string]: Style,
    '@fallbacks'?: Fallbacks,
    '@font-face'?: FontFaces,
    '@keyframes'?: Keyframes,
    '@media'?: MediaQueries,
    '@supports'?: Supports,
  };

  declare export type StyleDeclarations = SelectorMap<ClassName | StyleDeclaration>;

  declare export type Support = StyleBlock;

  declare export type Supports = { [feature: string]: Support };

  declare export type ThemeDeclaration = StyleBlock;

  declare export type TransformedDeclarations = SelectorMap<ClassName>;

  declare export class Adapter {
    bypassNativeStyleSheet: boolean;
    native: boolean;
    options: Object;
    unifiedSyntax: boolean;

    constructor(options?: Object): this;
    transform<T: Object>(styleName: string, declarations: T): TransformedDeclarations;
  }

  declare export class ClassNameAdapter extends Adapter {}

  declare export class ThemeProvider extends React.Component<{
    children: React$Node,
    name: string,
  }> {}

  declare export default class Aesthetic {
    adapter: Adapter;
    cache: { [styleName: string]: TransformedDeclarations };
    native: boolean;
    options: AestheticOptions;
    parents: { [childStyleName: string]: string };
    styles: { [styleName: string]: StyleCallback | StyleDeclarations };
    themes: { [themeName: string]: ThemeDeclaration };

    constructor(adapter: Adapter, options?: Object): this;
    extendTheme(
      parentThemeName: string,
      themeName: string,
      theme?: ThemeDeclaration,
      globals?: GlobalDeclaration,
    ): this;
    getStyles(styleName: string, themeName?: string): StyleDeclarations;
    getTheme(themeName?: string): ThemeDeclaration;
    registerTheme(
      themeName: string,
      theme?: ThemeDeclaration,
      globals?: GlobalDeclaration,
    ): this;
    setAdapter(adapter: Adapter): this;
    setStyles(
      styleName: string,
      declarations: StyleCallback | StyleDeclarations,
      extendFrom?: string,
    ): this;
    transformStyles(styleName: string, themeName?: string): TransformedDeclarations;
    validateTransform(styleName: string, selector: string, value: ClassName): ClassName;
  }

  declare export function style(
    aesthetic: Aesthetic,
    styles: StyleCallback | StyleDeclarations,
    options?: HOCOptions,
  ): (HOCWrappedComponent) => HOCComponent;

  declare export function createStyler(aesthetic: Aesthetic): style;

  declare export function classes(...values: *[]): string;
}

declare module 'aesthetic/unified' {
  import type {
    AtRuleCache,
    EventCallback,
    Fallbacks,
    FontFaces,
    Keyframes,
    MediaQueries,
    StyleDeclaration,
    StyleDeclarations,
    Supports,
  } from 'aesthetic';

  declare export default class UnifiedSyntax {
    static LOCAL: string;
    static GLOBAL: string;
    events: { [eventName: string]: EventCallback };
    fallbacks: AtRuleCache<Fallbacks>;
    fontFaces: FontFaces;
    fontFacesCache: AtRuleCache<string[]>;
    keyframes: Keyframes;
    keyframesCache: AtRuleCache<string>;
    mediaQueries: AtRuleCache<MediaQueries>;
    supports: AtRuleCache<Supports>;

    convert(declarations: StyleDeclarations): StyleDeclarations;
    convertDeclaration(selector: string, properties: StyleDeclaration): StyleDeclaration;
    emit(eventName: string, args: *[]): this;
    extract(selector: string, atRule: string, rules: *, fromScope: string): void;
    extractFallbacks(selector: string, properties: Fallbacks, fromScope: string): void;
    extractFontFaces(selector: string, rules: FontFaces, fromScope: string): void;
    extractKeyframes(selector: string, rules: Keyframes, fromScope: string): void;
    extractMediaQueries(selector: string, rules: MediaQueries, fromScope: string): void;
    extractSupports(selector: string, rules: Supports, fromScope: string): void;
    off(eventName: string): this;
    on(eventName: string, callback: EventCallback): this;
    resetGlobalCache(): void;
    resetLocalCache(): void;
  }
}
